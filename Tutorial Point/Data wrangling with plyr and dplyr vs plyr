Plyr: 
=====
plyr package is a tool for doing split-apply-combine (SAC) procedures. 

This is an extremely common pattern in data analysis: 
we solve a complex problem by breaking it down into small pieces, doing something to each piece and then combining the results back together again.

install.packages("plyr")
library(plyr)

Plyr provides a set of functions for common data analysis problems:
-------------------------------------------------------------------
arrange: re-order the rows of a data frame by specifying the columns to order by
mutate: add new columns or modifying existing columns, like transform, but new columns can refer to other columns that you just created.
summarise: like mutate but create a new data frame, not preserving any columns in the old data frame.
join: an adapation of merge which is more similar to SQL, and has a much faster implementation if you only want to find the first match.
match_df: a version of join that instead of returning the two tables combined together, only returns the rows in the first table that match the second.
colwise: make any function work colwise on a dataframe
rename: easily rename columns in a data frame
round_any: round a number to any degree of precision
count: quickly count unique combinations and return return as a data frame.

plyr vs dplyr:
==============
--> dplyr is a new package which provides a set of tools for efficiently manipulating datasets in R. 
--> dplyr is the next iteration of plyr, focussing on only data frames. 
--> dplyr is faster, has a more consistent API and should be easier to use.

Practise with Dataset:
======================

Lets compare plyr and dplyr with a little example, using the Batting dataset from the fantastic Lahman package which makes the complete Lahman baseball database easily accessible from R. 
--> Pretend we want to find the five players who have batted in the most games in all of baseball history.

Install and Load Lahman:
install.packages("Lahman")
library(Lahman)

--> The basic format is two letters followed by ply(). 
--> The first letter refers to the format in and the second to the format out.
--> The three main letters are:
	d = data frame
	a = array (includes matrices)
	l = list

--> So, ddply means: take a data frame, split it up, do something to it, and return a data frame. 
--> ldply means: take a list, split it up, do something to it, and return a data frame. 
--> This extends to all combinations. 
--> In the following table, the columns are the input formats and the rows are the output format:

ObjectType	dframe	list	array
==========      ======  ====    =====
data frame	ddply	ldply	adply
list		dlply	llply	alply
array		daply	laply	aaply

dplyr is faster than plyr.