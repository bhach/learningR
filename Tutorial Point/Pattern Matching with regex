Regex:
======
#test to check output of regex
writeLines("regex")     #corresponding string is outputted


* `\d`: matches any digit
* `\s`: matches any whitespace
* `[abc]`: matches a, b, or c
* `[^abc]`: matches anything except a, b, or c
* `[a|b]`: matches a or b

Include both single and double quotes in string, escape with \
s <- '5'10"'    # error
s <- "5'10""    # error
s <- '5\'10"'    # correct
s <- "5'10\""    # correct

# ^ means start of string, $ means end of string

[1-20] means character with 0,1 and 2 in the same order.
[a-z]
[A-Z]
[a-zA-Z]

#Example1 - US Mobile Numbers:
------------------------------
strings <- c(
"310 733 8965",
"310-292-8753",
"Work: 310-499-7527; Home: 310.355.3679/310-880-4789",
"3109185662")

phone<-"([2-9][0-9]{2})[. -]*([0-9]{3})[. -]*([0-9]{4})

str_locate(strings, phone)
str_locate_all(strings, phone)
str_extract(strings,phone)
str_extract_all(strings,phone)
str_extract(strings,phone,simplify=T)
str_extract_all(strings,phone,simplify=T)
str_match(strings,phone)
str_match_all(strings,phone)
str_replace(strings,phone,"XXX-XXX-XXXX")
str_replace_all(strings,phone,"XXX-XXX-XXXX")


#Example2 - Email Addressses:
-----------------------------
email<-c(
"bhask@hotmail.com",
"lidia@gmail.com",
"nirmal@ntv.com",
"abhi@jih.in",
"raghav@hik.te"
)

pattern<-"@"

str_split(email,pattern)
str_split(email,pattern,simplify=T)


#Example3:
----------
words<-"Hi, everyone. We are learning regex functions in stringr package."
Install.packages("tidyverse")
df <- tibble(word = words)

Vowels, Consonanats:
a<-df %>%
  mutate(
    vowels = str_count(word, "[aeiou]"),
    consonants = str_count(word, "[^aeiou]"),
    a_or_c = str_count(word, "[a|c]")
  )

Return words that start with "y":
df %>%
  dplyr::filter(str_detect(words, "^y"))
  
Return words that start with vowels:
df %>%
  dplyr::filter(str_detect(word, "^[aeiou]"))
  
Return words that do not contain vowels:
df %>%
  dplyr::filter(!str_detect(word, "[aeiou]"))


#Example4 - Parsing Numbers (Removing Commas):
----------------------------------------------
url <- "https://en.wikipedia.org/w/index.php?title=Gun_violence_in_the_United_States_by_state&direction=prev&oldid=810166167"
murders_raw <- read_html(url) %>% 
  html_nodes("table") %>% 
  html_table() %>%
  .[[1]] %>%
  setNames(c("state", "population", "total", "murder_rate"))

as.numeric(murders_raw$population[1:3])     #error as population had coomas

# detect whether there are commas
commas <- function(x) any(str_detect(x, ","))
murders_raw %>% summarize_all(funs(commas))

# replace commas with the empty string and convert to numeric
test_1 <- str_replace_all(murders_raw$population, ",", "")
test_1 <- as.numeric(test_1)

# parse_number also removes commas and converts to numeric
test_2 <- parse_number(murders_raw$population)


Example6 - Heights:
-------------------
library(dslabs)
str(reported_heights)

x <- as.numeric(reported_heights$height)
check if any NAs resulted
sum(is.na(x))

10 examples of x'y or x'y" or x'y\"
pattern <- "^\\d\\s*'\\s*\\d{1,2}\\.*\\d*'*\"*$"

# 10 examples of x.y or x,y
pattern <- "^[4-6]\\s*[\\.|,]\\s*([0-9]|10|11)$"


Example7 - Pattern Matching:
----------------------------
# detect whether a comma is present
pattern <- ","
str_detect(murders_raw$total, pattern) 

# show the subset of strings including "cm"
str_subset(reported_heights$height, "cm")

# use the "or" symbol inside a regex (|)
yes <- c("180 cm", "70 inches")
no <- c("180", "70''")
s <- c(yes, no)
str_detect(s, "cm") | str_detect(s, "inches")
str_detect(s, "cm|inches")

# highlight all instances of a pattern
str_view_all(s, pattern)

pattern <- "^\\d$"    #start of string, followed by 1 digit and followed by end of the string
yes <- c("1", "5", "9")
no <- c("12", "123", " 1", "a4", "b")
s <- c(yes, no)
str_view(s, pattern)

# curly braces define quantifiers: 1 or 2 digits 
pattern <- "^\\d{1,2}$"
str_view(s, pattern)

# combining character class, anchors and quantifier
pattern <- "^[4-7]'\\d{1,2}\"$"
yes <- c("5'7\"", "6'2\"",  "5'12\"")
no <- c("6,2\"", "6.2\"","I am 5'11\"", "3'2\"", "64")

# replace or remove feet/inches words before matching
pattern <- "^[4-7]'\\d{1,2}$"
problems %>% 
  str_replace("feet|ft|foot", "'") %>% # replace feet, ft, foot with ' 
  str_replace("inches|in|''|\"", "") %>% # remove all inches symbols
  str_detect(pattern) %>% 
  sum()


Example8:
---------
# * means 0 or more instances of a character
yes <- c("AB", "A1B", "A11B", "A111B", "A1111B")
str_detect(yes, "A1*B")


# test how *, ? and + differ
data.frame(string = c("AB", "A1B", "A11B", "A111B", "A1111B"),
           none_or_more = str_detect(yes, "A1*B"),
           nore_or_once = str_detect(yes, "A1?B"),
           once_or_more = str_detect(yes, "A1+B"))
           
# update pattern by adding optional spaces before and after feet symbol
pattern <- "^[4-7]\\s*'\\s*\\d{1,2}$"
problems %>% 
  str_replace("feet|ft|foot", "'") %>% # replace feet, ft, foot with ' 
  str_replace("inches|in|''|\"", "") %>% # remove all inches symbols
  str_detect(pattern) %>% 
  sum()
  
  
Groups are defined using parentheses.
Once we define groups, we can use the function str_match() to extract the values these groups define.
str_extract() extracts only strings that match a pattern, not the values defined by groups.
You can refer to the ith group with \\i. For example, refer to the value in the second group with \\2.

# define regex with and without groups
pattern_without_groups <- "^[4-7],\\d*$"
pattern_with_groups <-  "^([4-7]),(\\d*)$"

# create examples
yes <- c("5,9", "5,11", "6,", "6,1")
no <- c("5'9", ",", "2,8", "6.1.1")
s <- c(yes, no)

# demonstrate the effect of groups
str_detect(s, pattern_without_groups)
str_detect(s, pattern_with_groups)

# demonstrate difference between str_match and str_extract
str_match(s, pattern_with_groups)
str_extract(s, pattern_with_groups)

# improve the pattern to recognize more events
pattern_with_groups <-  "^([4-7]),(\\d*)$"
yes <- c("5,9", "5,11", "6,", "6,1")
no <- c("5'9", ",", "2,8", "6.1.1")
s <- c(yes, no)
str_replace(s, pattern_with_groups, "\\1'\\2")

"\\1" extracts the first group
"\\2" extracts the seconds group

# final pattern
pattern_with_groups <-"^([4-7])\\s*[,\\.\\s+]\\s*(\\d*)$"

# combine stringr commands with the pipe
str_subset(problems, pattern_with_groups) %>% head
str_subset(problems, pattern_with_groups) %>% 
  str_replace(pattern_with_groups, "\\1'\\2") %>% head
