Date and Time with Lubridate:
=============================

library(tidyverse)
library(nycflights13) 
library(lubridate)


Creating datetime objects:
==========================
today()
now()
observe the structures of above codes

`today()` function returns the current date and it is of class "Date".   
`now()` function returns the current datetion and it is of class "POSIXct".



Understanding difference between POSIXct and Date:
==================================================
"POSIXct" is the most common class in R for datetimes.   These store the number of seconds since an origin point of "1970-01-01 00:00:00 UTC", whereas the "Date" class stores the number of days since "1970-01-01".


string1 <- "2020-09-22"
string2 <- "2020-09-22 17:00:00"
str(string1)      #character
str(string2)      #character


date1 <- as.Date(string1)      #baseR
date2 <- as_date(string1)      #lubridate
datetime1 <- as.POSIXct(string2)     #baseR
datetime2 <- as_datetime(string2)    #lubridate
str(date1)
str(date2)
str(datetime1)
str(datetime2)


Format Date & Times:
====================

dateFormat1 <- "20200922"
dateFormat2 <- "09-22-2020"
dateFormat3 <- "22/09/2020"
dateFormat4 <- "09-22-2020 17:00:00"
dateFormat5 <- "20200922 170000"
ymd(dateFormat1)
mdy(dateFormat2)
dmy(dateFormat3)
mdy_hms(dateFormat4)
ymd_hms(dateFormat5)



Isolating components of the datetime:
=====================================

todayDate <- "2020-09-22 17:15:00"
year(todayDate)
month(todayDate)
mday(todayDate)
hour(todayDate)
minute(todayDate)
second(todayDate)
yday(todayDate)
wday(todayDate)


#Adding labels gives the Factors and the order
month(todayDate, label = TRUE)
wday(todayDate, label = TRUE)


Practising with NYCFlights Dataset:
===================================

flights
data <- flights %>%
   select(flight,carrier,time_hour)
data

1.Create a bar chart of the count of flights by month:

data %>%
  mutate(month = month(time_hour, label = TRUE)) %>%
  ggplot() +
  geom_bar(aes(x = month), fill = "navy", color = "gold")

2.Create a line plot for flights by hour of the day:

data %>%
  mutate(hour = hour(time_hour)) %>%
  group_by(hour) %>%
  tally() %>%
  ggplot() +
  geom_line(aes(x = hour, y = n)) +
  scale_x_continuous(breaks = seq(0, 24, 4))



Time spans (durations, periods, intervals):
===========================================

* Durations measure the exact number of seconds that occur between two instants.
* Periods measure the change in clock time that occurs between two instants.
* Intervals are timespans representing a start and an end point.


startDate <- as_datetime("2020-03-01 00:00:00")
endDate <- as_datetime("2020-03-31 23:59:59")
difftime <- endDate - startDate
difftime


as.duration(difftime)    #output in secs
as.period(difftime)      $main output is days
as.interval(startDate, endDate)    #shows time as interval


Addition/Subtraction:
=====================

startDate + dhours(5)
startDate + minutes(300)

However, here is an example where they will return DIFFERENT results:
stTime <- ymd_hms("2020-03-07 12:00:00", tz = "America/New_York")
stTime + ddays(1)
stTime + days(1)
```

Note that R is very sensitive to Daylight Savings Time.  The duration function `ddays()` added the number of seconds in a typical day to the original date.  However, March 7, 2020 only had 23 hours due to the presence of Daylight Savings Time.   The difference with the period function `days()` is that it added the natural human day -- which, when we think of a day, will be the same hour of the following day despite Daylight Savings Time.

Intervals also come with a variety of helper functions like `int_start()`, `int_end()`, `int_flip()`, `int_shift()`, `int_overlaps()`, `int_standardize()`, `int_aligns()`, and `int_diff()`.  These can be accessed through the help documentation and are fairly intuitive.
