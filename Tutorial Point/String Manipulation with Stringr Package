String Manipulation with Stringr Package:
=========================================
Stringr package provide a cohesive set of functions designed to make working with strings as easy as possible.

phrase <- "I love to work with strings"
cities <- c("Chicago", "San Francisco", "Miami")
Rise <- "   Rise Academy   "
string1 <- "What is"
string2 <- "your name ?"


#length
str_length(phrase)


#count
str_count(cities)


#pattern
str_detect(phrase, "ot")
str_detect(phrase, "ov")


#trim
str_trim(Rise)


#concatenate
str_c(string1, string2, sep = " ")
str_c(string1, string2, sep = ".")
str_c(string1, string2, sep = "")


#order
str_order(cities)


#sort
str_sort(cities)


#replace
str_replace(phrase, "o", "i")
str_replace_all(phrase, "o", "i")


#split
str_split(phrase, "to")

#pattern locate
str_locate(string, pattern)


#Identify US Mobile Numbers from the strings
strings <- c(
"310 733 8965",
"310-292-8753",
"Work: 310-499-7527; Home: 310.355.3679/310-880-4789",
"3109185662")

phone<-"([2-9][0-9]{2})[. -]*([0-9]{3})[. -]*([0-9]{4})



str_locate(strings, phone)
str_locate_all(strings, phone)
str_extract(strings,phone)
str_extract_all(strings,phone)
str_extract(strings,phone,simplify=T)
str_extract_all(strings,phone,simplify=T)
str_match(strings,phone)
str_match_all(strings,phone)
str_replace(strings,phone,"XXX-XXX-XXXX")
str_replace_all(strings,phone,"XXX-XXX-XXXX")



#Email Addressses
email<-c(
"bhask@hotmail.com",
"lidia@gmail.com",
"nirmal@ntv.com",
"abhi@jih.in",
"raghav@hik.te"
)

pattern<-"@"


str_split(email,pattern)
str_split(email,pattern,simplify=T)


Next, we are going to use the built-in `words` vector to create a data frame and illustrate regular expression functionalities.   We have already utilized exact matches.    Here are some other options:

* `\d`: matches any digit
* `\s`: matches any whitespace
* `[abc]`: matches a, b, or c
* `[^abc]`: matches anything except a, b, or c
* `[a|b]`: matches a or b

words<-"Hi, everyone. We are learning regex functions in stringr package."
Install.packages("tidyverse")
df <- tibble(word = words)


Use str_count() to get regular expression matches
a<-df %>%
  mutate(
    vowels = str_count(word, "[aeiou]"),
    consonants = str_count(word, "[^aeiou]"),
    a_or_c = str_count(word, "[a|c]")
  )
class(a)


Return words that start with "y"}
df %>%
  dplyr::filter(str_detect(words, "^y"))
  

Return words that start with vowels
df %>%
  dplyr::filter(str_detect(word, "^[aeiou]"))
  
  
Return words that do not contain vowels
df %>%
  dplyr::filter(!str_detect(word, "[aeiou]"))


Include both single and double quotes in string, escape with \
s <- '5'10"'    # error
s <- "5'10""    # error
s <- '5\'10"'    # correct
s <- "5'10\""    # correct


#Parsing Numbers:
=================

url <- "https://en.wikipedia.org/w/index.php?title=Gun_violence_in_the_United_States_by_state&direction=prev&oldid=810166167"
murders_raw <- read_html(url) %>% 
  html_nodes("table") %>% 
  html_table() %>%
  .[[1]] %>%
  setNames(c("state", "population", "total", "murder_rate"))

head(murders_raw)

as.numeric(murders_raw$population[1:3])     #error as population had coomas

# detect whether there are commas
commas <- function(x) any(str_detect(x, ","))
murders_raw %>% summarize_all(funs(commas))

# replace commas with the empty string and convert to numeric
test_1 <- str_replace_all(murders_raw$population, ",", "")
test_1 <- as.numeric(test_1)

# parse_number also removes commas and converts to numeric
test_2 <- parse_number(murders_raw$population)

murders_new <- murders_raw %>% mutate_at(2:3, parse_number)


CASE STUDY MURDERS:
===================
# load raw heights data and inspect
library(dslabs)
str(reported_heights)


# convert to numeric, inspect, count NAs
x <- as.numeric(reported_heights$height)


#check if any NAs resulted
sum(is.na(x))


# keep only entries that result in NAs
reported_heights %>% mutate(new_height = as.numeric(height)) %>%
  filter(is.na(new_height)) %>% 
  head(n=10)


# calculate cutoffs that cover 99.999% of human population
alpha <- 1/10^6
qnorm(1-alpha/2, 69.1, 2.9)
qnorm(alpha/2, 63.7, 2.7)


# keep only entries that either result in NAs or are outside the plausible range of heights
not_inches <- function(x, smallest = 50, tallest = 84){
  inches <- suppressWarnings(as.numeric(x))
  ind <- is.na(inches) | inches < smallest | inches > tallest
  ind
}


# number of problematic entries
problems <- reported_heights %>% 
  filter(not_inches(height)) %>%
  .$height
length(problems)


# 10 examples of x'y or x'y" or x'y\"
pattern <- "^\\d\\s*'\\s*\\d{1,2}\\.*\\d*'*\"*$"
str_subset(problems, pattern) %>% head(n=10) %>% cat


# 10 examples of x.y or x,y
pattern <- "^[4-6]\\s*[\\.|,]\\s*([0-9]|10|11)$"
str_subset(problems, pattern) %>% head(n=10) %>% cat


# 10 examples of entries in cm rather than inches
ind <- which(between(suppressWarnings(as.numeric(problems))/2.54, 54, 81) )
ind <- ind[!is.na(ind)]
problems[ind] %>% head(n=10) %>% cat


