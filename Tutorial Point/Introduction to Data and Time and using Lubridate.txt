Introudction to Date and Time:
==============================


Sys.Date()          #current date
Sys.time()          #current rime
Sys.timezone()      #system timezone

Anything in between " " is sting only but since we are as.date, the class is Date
x <- as.Date("2018-10-12")
y<- "2018-10-12"
#observe the class and type of x and y.


as.Date(c('2018-10-11', '2018-10-12'))

a <- Sys.Date()
b <- Sys.time()
typeof(a)	# "double"
typeof(b)	# "double"
class(a)	# "Date"
class(b)	# "POSIXct" "POSIXIt"



DateTimeClasses:
================
DateTimeClasses function description of the classes "POSIXlt" and "POSIXct" representing calendar dates and times.

To format Dates we use the format(date, format="%Y-%m-%d") function with either the POSIXct (given from as.POSIXct()) or POSIXlt (given from as.POSIXlt())



Fomatting Date Objects:
=======================

Format   Code_Meaning
------   -----------
  %d 	  day
  %m 	  month
  %y 	  year in 2-digits
  %Y 	  year in 4-digits
  %b 	  abbreviated month in 3 chars
  %B 	  full name of the month


# It tries to interprets the string as %Y-%m-%d
as.Date("2018-10-15")	# no problem
as.Date("2018/10/15")	# no problem
as.Date("   2018-10-15 datahills") # leading whitespace and all trailing characters are ignored
as.Date("15-10-2018")	#interprets as "%Y-%m-%d". It means 0015 is year , 10 is month and 20 is day.



as.Date("2018-10-15", format = "%Y-%m-%d")
as.Date("10/15/18", format = "%m/%d/%y")
as.Date("October 15, 2018", "%B %d, %Y")
as.Date("October 15th, 2018", "%B %dth, %Y") # add separators and literals to format
as.Date("15-10-2018",format="%d-%m-%Y")
as.Date("15-10-2018", "%d-%m-%Y")
as.Date("15 Oct, 2018","%d %b, %Y")
as.Date("15Oct2018","%d%b%Y")
as.Date("15 October, 2018", "%d %B, %Y")



Format date-time objects:
==========================================

d = as.POSIXct("2018-10-15 06:30:10.10", tz = "UTC")

format(d,"%S") 		# 00-61 Second as integer
format(d,"%OS") 	# 00-60.99? Second as fractional
format(d,"%M") 		# 00-59 Minute
format(d,"%H") 		# 00-23 Hours
format(d,"%I") 		# 01-12 Hours
format(d,"%p") 		# AM/PM Indicator
format(d,"%Z") 		# Time Zone Abbreviation



Adding/Subtracting times:
=========================
To add/subtract time, use POSIXct, since it stores times in seconds

as.POSIXct("2018-10-15")

# adding/subtracting times - 60 seconds
as.POSIXct("2018-10-15") + 60	

# adding 5 hours, 30 minutes, 10 seconds
as.POSIXct("2018-10-14") + ( (5 * 60 * 60) + (30 * 60) + 10)

# as.difftime can be used to add time periods to a date.
as.POSIXct("2018-10-14") +
	as.difftime(5, units="hours") +
	as.difftime(30, units="mins") +
	as.difftime(10, units="secs")


# To find the difference between dates/times use difftime() for differences in seconds, minutes, hours, days or weeks.
# using POSIXct objects
difftime(
	as.POSIXct("2018-10-14 12:00:00"),
	as.POSIXct("2018-10-14 11:59:50"),
	unit = "secs")


as.POSIXct("07:30", format = "%H:%M") # time, formatting string

strptime("07:30", format = "%H:%M") # identical, but makes a POSIXlt object

as.POSIXct("07 AM", format = "%I %p")

as.POSIXct("07:30:10", format = "%H:%M:%S",tz = "Asia/Calcutta") # time string without timezone & set time zone

as.POSIXct("2018-10-15 07:30:10", format = "%F %T") # shortcut tokens for "%Y-%m-%d" and "%H:%M:%S"



Date and Time with Lubridate:
=============================

library(tidyverse)
library(nycflights13) 
library(lubridate)


Creating datetime objects:
==========================
today()
now()
observe the structures of above codes

`today()` function returns the current date and it is of class "Date".   
`now()` function returns the current datetion and it is of class "POSIXct".



Understanding difference between POSIXct and Date:
==================================================
"POSIXct" is the most common class in R for datetimes.   These store the number of seconds since an origin point of "1970-01-01 00:00:00 UTC", whereas the "Date" class stores the number of days since "1970-01-01".


string1 <- "2020-09-22"
string2 <- "2020-09-22 17:00:00"
str(string1)      #character
str(string2)      #character


date1 <- as.Date(string1)      #baseR
date2 <- as_date(string1)      #lubridate
datetime1 <- as.POSIXct(string2)     #baseR
datetime2 <- as_datetime(string2)    #lubridate
str(date1)
str(date2)
str(datetime1)
str(datetime2)


Format Date & Times:
====================

dateFormat1 <- "20200922"
dateFormat2 <- "09-22-2020"
dateFormat3 <- "22/09/2020"
dateFormat4 <- "09-22-2020 17:00:00"
dateFormat5 <- "20200922 170000"
ymd(dateFormat1)
mdy(dateFormat2)
dmy(dateFormat3)
mdy_hms(dateFormat4)
ymd_hms(dateFormat5)



Isolating components of the datetime:
=====================================

todayDate <- "2020-09-22 17:15:00"
year(todayDate)
month(todayDate)
mday(todayDate)
hour(todayDate)
minute(todayDate)
second(todayDate)
yday(todayDate)
wday(todayDate)


#Adding labels gives the Factors and the order
month(todayDate, label = TRUE)
wday(todayDate, label = TRUE)


Practising with NYCFlights Dataset:
===================================

flights
data <- flights %>%
   select(flight,carrier,time_hour)
data

1.Create a bar chart of the count of flights by month:

data %>%
  mutate(month = month(time_hour, label = TRUE)) %>%
  ggplot() +
  geom_bar(aes(x = month), fill = "navy", color = "gold")

2.Create a line plot for flights by hour of the day:

data %>%
  mutate(hour = hour(time_hour)) %>%
  group_by(hour) %>%
  tally() %>%
  ggplot() +
  geom_line(aes(x = hour, y = n)) +
  scale_x_continuous(breaks = seq(0, 24, 4))



Time spans (durations, periods, intervals):
===========================================

* Durations measure the exact number of seconds that occur between two instants.
* Periods measure the change in clock time that occurs between two instants.
* Intervals are timespans representing a start and an end point.


startDate <- as_datetime("2020-03-01 00:00:00")
endDate <- as_datetime("2020-03-31 23:59:59")
difftime <- endDate - startDate
difftime


as.duration(difftime)    #output in secs
as.period(difftime)      $main output is days
as.interval(startDate, endDate)    #shows time as interval


Addition/Subtraction:
=====================

startDate + dhours(5)
startDate + minutes(300)

However, here is an example where they will return DIFFERENT results:
stTime <- ymd_hms("2020-03-07 12:00:00", tz = "America/New_York")
stTime + ddays(1)
stTime + days(1)

Note that R is very sensitive to Daylight Savings Time.  The duration function `ddays()` added the number of seconds in a typical day to the original date.  However, March 7, 2020 only had 23 hours due to the presence of Daylight Savings Time.   The difference with the period function `days()` is that it added the natural human day -- which, when we think of a day, will be the same hour of the following day despite Daylight Savings Time.


